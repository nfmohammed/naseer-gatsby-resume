{"version":3,"sources":["webpack:///./src/components/resume-experience.js","webpack:///./src/components/resume-skills.js","webpack:///./src/components/resume-section-experience-skills.js","webpack:///./src/components/resume-summary.js","webpack:///./src/components/resume-section-summary-contact.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js","webpack:///./src/components/resume-contact.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["breakpoints","createBreakpoints","useStyles","makeStyles","theme","_avatarItem","root","maxWidth","backgroundColor","paper","padding","inline","display","avatarItem","greenAvatar","margin","color","green","ResumeExperience","classes","data","_2605940089","react_default","a","createElement","Paper","className","Typography","variant","component","List","allExperienceJson","edges","map","s","ListItem","alignItems","ListItemAvatar","Avatar","src","ListItemText","primary","position","secondary","Fragment","paddingBottom","company","duration","dense","node","description","d","button","Divider","card","transition","boxShadow","&:hover","content","textAlign","listStyle","listItemStyle","SimpleList","_2002274151","allSkillJson","Card","CardContent","gutterBottom","category","info","infoItem","flexGrow","paddingTop","justifyContent","SectionResumeExperienceSkills","Container","Grid","container","justify","spacing","item","xs","sm","md","lg","ResumeSummary","_4048151892","Box","allSummaryJson","key","id","style","summary","SectionResumeSummaryContact","pxToRem","value","createMuiTheme","palette","pages_breakpoints","overrides","MuiAppBar","colorDefault","MuiSvgIcon","_root","width","MuiTypography","title","_title","fontSize","h6","_h","body1","_body","__webpack_exports__","ThemeProvider","layout","seo","SEO","_ref","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","property","author","concat","_buttonStyle","buttonStyle","icons","mail","Mail_default","github","GitHub_default","linkedin","LinkedIn_default","twitter","Twitter_default","ResumeContact","_1887432444","allContactJson","Link","href","underline","rel","target","IconButton","Badge","type","headerStyle","Header","siteTitle","AppBar","Toolbar","noWrap","header","layoutStyle","children","_856328897"],"mappings":"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","file":"component---src-pages-index-js-263ed84da48d4fa0c62b.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport { green } from '@material-ui/core/colors';\nimport Paper from '@material-ui/core/Paper';\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\n\nconst breakpoints = createBreakpoints({});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 600,\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(3, 2),\n  },\n  inline: {\n    display: 'inline',\n  },\n  avatarItem: {\n    display: \"none\",\n    [breakpoints.up(\"md\")]: {\n      display: \"inline\"\n    }\n  },\n  greenAvatar: {\n      margin: 10,\n      color: '#fff',\n      backgroundColor: green[500]\n  }\n}));\n\nexport default function ResumeExperience() {\n  const classes = useStyles();\n\n  const data = useStaticQuery(graphql`\n    query {\n      allExperienceJson {\n        edges {\n          node {\n            id\n            position\n            company\n            duration\n            description\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Paper className={classes.root}>\n      <Typography variant=\"h6\" component=\"h3\">\n        Work Experience\n        </Typography>\n      <List>\n        <div>\n          {data.allExperienceJson.edges.map(s => (\n            <ListItem alignItems=\"flex-start\">\n              <ListItemAvatar className={classes.avatarItem}>\n                <Avatar className={classes.greenAvatar} src=\"static/images/expedia-logo.jpg\">\n                  \n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary=\n                  {<Typography\n                      component=\"span\"\n                      variant=\"h6\"\n                    >\n                  {s.node.position}\n                  </Typography>\n\n                }\n                secondary={\n                  <React.Fragment>\n                    <Typography\n                      component=\"span\"\n                      variant=\"body1\"\n                      className={classes.inline}\n                      color=\"textPrimary\"\n                      paddingBottom={100}\n                    >\n                      {s.node.company}\n                    </Typography>\n                    - {s.node.duration}\n\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textPrimary\">\n                        <List dense=\"true\">\n                          {s.node.description.map(d =>(\n                            <React.Fragment>\n                            <ListItem button>\n                              <ListItemText>{d}</ListItemText>\n                            </ListItem>\n                            <Divider/>\n                            </React.Fragment>\n                          ))}\n                        </List>\n                      \n                    </Typography>\n\n                  </React.Fragment>\n                }\n              />\n            </ListItem>\n          ))}\n        </div>\n      </List>\n    </Paper>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Paper from '@material-ui/core/Paper';\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  card: {\n    maxWidth: 300,\n    margin: \"auto\",\n    transition: \"0.3s\",\n    boxShadow: \"0 8px 40px -12px rgba(0,0,0,0.3)\",\n    \"&:hover\": {\n      boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\"\n    }\n  },\n  content: {\n    textAlign: \"left\",\n  },\n  listStyle: {\n    padding: 0\n  },\n  listItemStyle: {\n    margin: 0,\n    padding: 0\n  }\n}));\n\n\nexport default function SimpleList() {\n  const classes = useStyles();\n\n  const data = useStaticQuery(graphql`\n    query {\n      allSkillJson {\n        edges {\n          node {\n            category\n            info\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Paper className={classes.root}>\n      {data.allSkillJson.edges.map(s => (\n      <Card className={classes.card}>\n        <CardContent className={classes.content}>\n          <Typography\n            className={\"MuiTypography--heading\"}\n            variant={\"h6\"}\n            gutterBottom\n          >\n            {s.node.category}\n          </Typography>\n          <Typography\n            className={\"MuiTypography--subheading\"}\n            variant={\"caption\"}\n          >\n            {s.node.info.map(infoItem => (\n              <List className={classes.listStyle}>\n                  <ListItem className={classes.listItemStyle}>\n                    <ListItemText>\n                    <Typography variant=\"bod1\">\n                      {infoItem}\n                      </Typography>\n                    </ListItemText>\n                  </ListItem>\n            </List>\n            ))}\n          </Typography>\n        </CardContent>\n      </Card>\n      ))}\n    </Paper>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ResumeExperience from './resume-experience';\nimport ResumeSkills from './resume-skills';\nimport { Container } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    paddingTop: 20\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    textAlign: 'center',\n    justifyContent: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function SectionResumeExperienceSkills() {\n  const classes = useStyles();\n\n  return (\n    \n    <Container>\n      <div className={classes.root}>\n      <Grid container justify=\"flex-end\" spacing={3}>\n        <Grid item xs={12} sm={12} md={9} lg={8}>\n          <ResumeExperience />\n        </Grid>\n        <Grid item xs={12} sm={12} md={3} lg={4}>\n          <ResumeSkills />\n        </Grid>\n\n      </Grid>\n      </div>\n    </Container>\n    \n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '0 auto',\n    padding: `1rem 2rem`,\n    maxWidth: 960\n  },\n}));\n\nexport default function ResumeSummary() {\n  const classes = useStyles();\n\n  const data = useStaticQuery(graphql`\n  query {\n    allSummaryJson {\n      edges {\n        node {\n          id\n          summary\n        }\n      }\n    }\n  }\n  `)\n\n  return (\n      <Box className={classes.root}>\n        <Typography variant=\"h6\" component=\"h3\">\n          About Me\n        </Typography>\n\n        <Typography component=\"p\">\n          {data.allSummaryJson.edges.map(s => (\n            <div key={s.node.id} style={{ paddingTop: 22 }}>\n              {s.node.summary}\n            </div>\n          ))}\n        </Typography>\n      </Box>\n  );\n}\n\n","import React from 'react';\nimport ResumeSummary from './resume-summary';\nimport Paper from '@material-ui/core/Paper';\nimport { Container } from '@material-ui/core';\n\n\nexport default function SectionResumeSummaryContact() {\n  return (\n    <Container maxWidth=\"lg\">\n    <Paper>\n      <ResumeSummary />\n    </Paper>\n    </Container>\n  );\n}","import React from \"react\";\nimport 'typeface-roboto';\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\nimport SectionResumeExperienceSkills from \"../components/resume-section-experience-skills\";\nimport SectionResumeSummaryContact from \"../components/resume-section-summary-contact\";\n\nfunction pxToRem(value) {\n  return `${value / 16}rem`;\n}\n\n// Generate breakpoints so we can use them in the theme definition\nconst breakpoints = createBreakpoints({});\nconst theme = createMuiTheme({\n  palette: {\n  },\n  breakpoints,\n  overrides: {\n    MuiAppBar: {\n      colorDefault: {\n        color: '#000',\n        backgroundColor: '#000',\n      }\n    },\n    MuiSvgIcon: {\n      root: {\n        width: pxToRem(14),\n        [breakpoints.up(\"md\")]: {\n          width: pxToRem(21)\n        }\n      }\n    },\n    MuiTypography: {\n      title: {\n        fontSize: pxToRem(21),\n        [breakpoints.up(\"md\")]: {\n          fontSize: pxToRem(24)\n        }\n      },\n      h6: {\n        fontSize: pxToRem(14),\n        [breakpoints.up(\"md\")]: {\n          fontSize: pxToRem(16)\n        }\n      },\n      body1: {\n        fontSize: pxToRem(14),\n        [breakpoints.up(\"md\")]: {\n          fontSize: pxToRem(16)\n        }\n      }\n    }\n  },\n  \n});\n\nconst IndexPage = () => (\n  <MuiThemeProvider theme={theme}>\n    <Layout>\n      <SEO title=\"Naseer\" />\n      <SectionResumeSummaryContact />\n      <SectionResumeExperienceSkills />\n    </Layout>\n  </MuiThemeProvider>\n\n)\n\n\nexport default IndexPage","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from '@material-ui/core';\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport MailIcon from '@material-ui/icons/Mail';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\n\nconst breakpoints = createBreakpoints({});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 360,\n  },\n  buttonStyle: {\n    padding: `0.5rem`,\n    [breakpoints.up(\"md\")]: {\n      padding: `1.0rem`\n    }\n  }\n}));\n\nconst icons = {\n  \"mail\": <MailIcon />,\n  \"github\": <GitHubIcon />,\n  \"linkedin\": <LinkedInIcon />,\n  \"twitter\": <TwitterIcon />\n}\n\nexport default function ResumeContact() {\n  const classes = useStyles();\n\n  const data = useStaticQuery(graphql`\n    query {\n      allContactJson {\n        edges {\n          node {\n            id\n            type\n            value\n            href\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={classes.root}>\n      {data.allContactJson.edges.map(s => (\n        <Link href={s.node.href} underline=\"hover\" rel=\"noopener noreferrer\" target=\"_blank\" color=\"inherit\">\n          <IconButton color=\"inherit\" className={classes.buttonStyle}>\n            <Badge color=\"secondary\">\n              {icons[s.node.type]}\n            </Badge>\n          </IconButton>\n        </Link>\n      ))}\n    </div>\n  );\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport ResumeContact from './resume-contact';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  headerStyle: {\n    margin: `0 auto`,\n    maxWidth: 960,\n    padding: `0rem 1.0875rem 1.0875rem`\n  }\n}));\n\nconst Header = ({ siteTitle }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.headerStyle}>\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography className={classes.title} variant=\"h6\" noWrap>\n          {siteTitle}\n        </Typography>\n        <ResumeContact />\n      </Toolbar>\n    </AppBar>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst useStyles = makeStyles(theme => ({\n  layoutStyle: {\n    margin: `0 auto`,\n    maxWidth: 960,\n    padding: `1.45rem 1.0875rem`\n  }\n}));\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n  const classes = useStyles();\n  return (\n    \n    <div className={classes.layoutStyle}>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <main>{children}</main>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}