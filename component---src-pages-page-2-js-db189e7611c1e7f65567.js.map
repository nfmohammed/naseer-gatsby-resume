{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/page-2.js","webpack:///./src/components/seo.js","webpack:///./src/components/resume-contact.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","__webpack_exports__","react_default","a","createElement","layout","seo","title","gatsby_link_default","to","SEO","_ref","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","breakpoints","createBreakpoints","useStyles","makeStyles","theme","_buttonStyle","root","maxWidth","buttonStyle","padding","icons","mail","Mail_default","github","GitHub_default","linkedin","LinkedIn_default","twitter","Twitter_default","ResumeContact","classes","_1887432444","className","allContactJson","edges","map","s","Link","href","underline","rel","target","color","IconButton","Badge","type","flexGrow","headerStyle","margin","Header","siteTitle","AppBar","position","Toolbar","Typography","variant","noWrap","header","layoutStyle","children","_856328897","m","module","require","default","location","pageResources","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","json"],"mappings":"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","file":"component---src-pages-page-2-js-db189e7611c1e7f65567.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst SecondPage = () => (\n  <Layout>\n    <SEO title=\"Page two\" />\n    <h1>Hi from the second page</h1>\n    <p>Welcome to page 2</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default SecondPage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from '@material-ui/core';\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport MailIcon from '@material-ui/icons/Mail';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport createBreakpoints from \"@material-ui/core/styles/createBreakpoints\";\n\nconst breakpoints = createBreakpoints({});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 360,\n  },\n  buttonStyle: {\n    padding: `0.5rem`,\n    [breakpoints.up(\"md\")]: {\n      padding: `1.0rem`\n    }\n  }\n}));\n\nconst icons = {\n  \"mail\": <MailIcon />,\n  \"github\": <GitHubIcon />,\n  \"linkedin\": <LinkedInIcon />,\n  \"twitter\": <TwitterIcon />\n}\n\nexport default function ResumeContact() {\n  const classes = useStyles();\n\n  const data = useStaticQuery(graphql`\n    query {\n      allContactJson {\n        edges {\n          node {\n            id\n            type\n            value\n            href\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={classes.root}>\n      {data.allContactJson.edges.map(s => (\n        <Link href={s.node.href} underline=\"hover\" rel=\"noopener noreferrer\" target=\"_blank\" color=\"inherit\">\n          <IconButton color=\"inherit\" className={classes.buttonStyle}>\n            <Badge color=\"secondary\">\n              {icons[s.node.type]}\n            </Badge>\n          </IconButton>\n        </Link>\n      ))}\n    </div>\n  );\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport ResumeContact from './resume-contact';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  headerStyle: {\n    margin: `0 auto`,\n    maxWidth: 960,\n    padding: `0rem 1.0875rem 1.0875rem`\n  }\n}));\n\nconst Header = ({ siteTitle }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.headerStyle}>\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography className={classes.title} variant=\"h6\" noWrap>\n          {siteTitle}\n        </Typography>\n        <ResumeContact />\n      </Toolbar>\n    </AppBar>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst useStyles = makeStyles(theme => ({\n  layoutStyle: {\n    margin: `0 auto`,\n    maxWidth: 960,\n    padding: `1.45rem 1.0875rem`\n  }\n}));\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n  const classes = useStyles();\n  return (\n    \n    <div className={classes.layoutStyle}>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <main>{children}</main>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}